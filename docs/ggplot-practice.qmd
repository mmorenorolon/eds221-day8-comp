---
title: "ggplot-practice"
format: html
---

```{r}
# General use packages:
library(tidyverse)
library(here)
library(janitor)
```

## Ggplot basics
```{r}
lizards <- read_csv(here("data_tidy", "lizards.csv"))
```
### Essentials
- data
- aesthetics
- geometry

```{r}
# ggplot essentials, 3 ways

# first
# data and aesthetics are consistent
ggplot(lizards, aes(x = total_length, y = weight)) + # (1 and 2)
  geom_point() # 3

# second
# data is consistent
ggplot(lizards) + geom_point(aes(x = total_length, y = weight))

# third
# nothing stays consistent
ggplot() + 
  geom_point(data = lizards, aes(x = total_length, y = weight))
```

##Swap geometries
```{r}
# bad example
ggplot(lizards, aes(x = total_length, y = weight)) + # (1 and 2)
  geom_line()
```

Some geometries only need one axis
```{r}
ggplot(lizards, aes(x = total_length)) + 
  geom_histogram()
```

Jitterplots are usually best with one categorical and one continuous variable. 
```{r}
ggplot(lizards, 
       aes(x = weight, y = common_name)) +
  geom_jitter()
```

## Aesthetic mapping
### Updating based on a constant value
Don't need to use the `aes()` function!

```{r}
ggplot(lizards,  aes(x = weight)) +
  geom_histogram(color = "orange",
                 fill = "purple",
                 alpha = 0.5,
                 size = 2,
                 linetype = "dotted")
```

## Updating aesthetics based on variables
In that case, we need to use the `aes()` function
```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             alpha = 0.3)
```

# Themes
## Update axis labels
```{r}
ggplot(lizards, aes(x = weight, y = site)) +
  geom_jitter(aes(color = common_name)) +
  theme(plot.title = element_text(hjust = 0.5)) + 
  labs(x = "Weight (g)",
       y = "Study site",
       title = "Lizard weights across sites at Jornada",
       color = "Species") #changes the name of the legend
```

##Reorder data
```{r}
lizard_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizard_counts,
       aes(x = n, y = fct_reorder(common_name, n))) +
  geom_col() +
  labs(x = "Individuals",
       y = "Species Common Name")

```

